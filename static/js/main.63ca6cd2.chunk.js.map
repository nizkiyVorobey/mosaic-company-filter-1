{"version":3,"sources":["api/getUsers.js","components/UserList/UserList.js","components/FieldsSortList/FieldsSortList.js","App.js","serviceWorker.js","index.js"],"names":["getUsers","UserList","user","key","company","className","firstname","lastname","email","phonenumber","birthday_contact","FieldsSortList","setUserSorted","setInputError","userSorted","setEmptyList","initialUser","useState","dateValue","setDateValue","monthValue","setMonthValue","useEffect","newSortedList","filterUser","checkCondition","pattern","test","length","filter","Date","getDate","toString","includes","getMonth","action","type","onChange","event","value","target","placeholder","App","inputError","emptyList","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63ca6cd2.chunk.js","sourcesContent":["export const getUsers = [\r\n  {\r\n    \"firstname\":\"Виктор\",\r\n    \"lastname\":\"Петров\",\r\n    \"email\":\"test@test.com\",\r\n    \"phonenumber\":\"77777777777\",\r\n    \"birthday_contact\":\"1981-03-30\",\r\n    \"company\":\"Company 1\"\r\n  },\r\n  {\r\n    \"firstname\":\"Вася\",\r\n    \"lastname\":\"Пупкин\",\r\n    \"email\":\"test@test.com\",\r\n    \"phonenumber\":\"333333333333\",\r\n    \"birthday_contact\":\"2004-10-20\",\r\n    \"company\":\"Company 2\"\r\n  },\r\n  {\r\n    \"firstname\":\"Дима\",\r\n    \"lastname\":\"Коршунов\",\r\n    \"email\":\"test@test.com\",\r\n    \"phonenumber\":\"22222222222\",\r\n    \"birthday_contact\":\"1991-07-16\",\r\n    \"company\":\"Company 3\"\r\n  },\r\n  {\r\n    \"firstname\":\"Сан\",\r\n    \"lastname\":\"Саныч\",\r\n    \"email\":\"test@test.com\",\r\n    \"phonenumber\":\"33333333333\",\r\n    \"birthday_contact\":\"1998-07-03\",\r\n    \"company\":\"Company 4\"\r\n  },\r\n\r\n  {\r\n    \"firstname\":\"Сан1\",\r\n    \"lastname\":\"Саныч1\",\r\n    \"email\":\"test@test.com\",\r\n    \"phonenumber\":\"33333333333\",\r\n    \"birthday_contact\":\"1998-03-13\",\r\n    \"company\":\"Company 5\"\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nexport const UserList = ({ user }) => {\r\n    return (\r\n        <div key={user.company} className=\"user-list-item-row\" >\r\n            <div className=\"user-item\"> {user.firstname} </div>\r\n            <div className=\"user-item\"> {user.lastname} </div>\r\n            <div className=\"user-item\"> {user.email} </div>\r\n            <div className=\"user-item\"> {user.phonenumber} </div>\r\n            <div className=\"user-item\"> {user.birthday_contact} </div>\r\n            <div className=\"user-item\"> {user.company} </div>\r\n        </div>\r\n    )\r\n};\r\n","\nimport React, { useState, useEffect } from 'react';\nimport './FieldsSortList.css';\n\nexport const FieldsSortList = ({ setUserSorted, userSorted, setInputError, setEmptyList, initialUser }) => {\n  const [dateValue, setDateValue] = useState('');\n  const [monthValue, setMonthValue] = useState('');\n\n  useEffect(() => {\n    const newSortedList = filterUser();\n\n    if (checkCondition(newSortedList)) {\n      setUserSorted(newSortedList);\n    } else {\n      setUserSorted([]);\n    }\n  }, [dateValue, monthValue]);\n\n  const checkCondition = (newSortedList) => {\n    const pattern = /[\\D]+/g;\n    if(pattern.test(dateValue) || pattern.test(monthValue)) {\n      setInputError(true);\n\n      return [];\n    }\n\n    if ((dateValue.length > 2 || monthValue.length > 2)) {\n      setInputError(true);\n      setEmptyList(false);\n\n      return [];\n    }\n\n    if (dateValue.length === 0 && monthValue.length === 0) {\n      setEmptyList(false);\n      setInputError(false);\n\n      return [...initialUser];\n    }\n\n    if (newSortedList.length === 0) {\n      setEmptyList(true);\n      setInputError(false);\n\n      return [];\n    }\n\n    setEmptyList(false);\n    setInputError(false);\n\n    return newSortedList;\n  };\n\n  const filterUser = () => (\n    [...initialUser]\n      .filter((user) => {\n        const date = new Date(user.birthday_contact).getDate();\n\n        return date.toString().includes(dateValue);\n      })\n      .filter((user) => {\n        const date = new Date(user.birthday_contact).getMonth() + 1;\n\n        return date.toString().includes(monthValue);\n      })\n  );\n\n  const changeByDate = (event) => {\n    const { value } = event.target;\n\n    setDateValue(value);\n  };\n\n  const changeByMonth = (event) => {\n    const { value } = event.target;\n\n    setMonthValue(value);\n  };\n\n  return (\n    <form action=\"\" className=\"filter-filed-wrapper\">\n      <input\n        type=\"text\"\n        onChange={changeByDate}\n        placeholder=\"Filter day\"\n        value={dateValue}\n        className=\"filter-filed\"\n      />\n      <input\n        type=\"text\"\n        onChange={changeByMonth}\n        placeholder=\"Filter month\"\n        value={monthValue}\n        className=\"filter-filed\"\n      />\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { getUsers } from './api/getUsers';\nimport { UserList } from './components/UserList/UserList';\nimport { FieldsSortList } from './components/FieldsSortList/FieldsSortList';\nimport './App.css';\n\nfunction App() {\n  const [userSorted, setUserSorted] = useState([...getUsers]);\n  const [inputError, setInputError] = useState(false);\n  const [emptyList, setEmptyList] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <h1>Test Task!</h1>\n\n      <FieldsSortList\n        setUserSorted={setUserSorted}\n        setInputError={setInputError}\n        setEmptyList={setEmptyList}\n        userSorted={userSorted}\n        initialUser={getUsers}\n      />\n\n      <div className=\"user-list\">\n        <div className=\"user-list-title\">\n          <div className=\"user-list-title-item-row\">\n            <div className=\"user-list-title-item-column\">Name</div>\n            <div className=\"user-list-title-item-column\">Surname</div>\n            <div className=\"user-list-title-item-column\">Email</div>\n            <div className=\"user-list-title-item-column\">phonenumber</div>\n            <div className=\"user-list-title-item-column\">Birthday</div>\n            <div className=\"user-list-title-item-column\">company</div>\n          </div>\n        </div>\n        {\n          emptyList\n            ? <p className=\"message\">Empty</p>\n            : inputError\n              ? <p className=\"message\">Error</p>\n              : (\n                <div className=\"user-list-body\">\n                  {\n                    userSorted.map(user => (\n                      <UserList user={user} key={user.company} />\n                    ))\n                  }\n                </div>\n              )\n        }\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}